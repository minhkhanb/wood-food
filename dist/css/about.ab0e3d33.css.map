{"version":3,"sources":["webpack:///src/components/C:/KhaLe/CodeWars/wood-food/src/components/SVGGraph.vue"],"names":[],"mappings":"AAsIA,yBACE,YAAa,CACb,WACF,CAEA,wBACE,gBAAiB,CACjB,WACF,CAEA,sBACE,2CAA8C,CAC9C,cAAe,CACf,SACF,CAEA,uBACE,oBAAqB,CACrB,gBAAiB,CACjB,UACF,CAEA,sBACE,iBAAkB,CAClB,KAAM,CACN,UACF","file":"about.ab0e3d33.css","sourcesContent":["<template>\n  <div>\n    <div id=\"demo\">\n      <!-- Use the component -->\n      <svg width=\"200\" height=\"200\">\n        <polygraph :stats=\"stats\"></polygraph>\n      </svg>\n      <!-- controls -->\n      <div :key=\"stat\" v-for=\"stat in stats\">\n        <label>{{ stat.label }}</label>\n        <input type=\"range\" v-model=\"stat.value\" min=\"0\" max=\"100\" />\n        <span>{{ stat.value }}</span>\n        <button @click=\"remove(stat)\" class=\"remove\">X</button>\n      </div>\n      <form id=\"add\">\n        <input name=\"newlabel\" v-model=\"newLabel\" />\n        <button @click=\"add\">Add a Stat</button>\n      </form>\n      <pre id=\"raw\">{{ stats }}</pre>\n    </div>\n\n    <p style=\"font-size: 12px\">* input[type=\"range\"] requires IE10 or above.</p>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\n\n// The raw data to observe\nvar stats = [\n  { label: 'A', value: 100 },\n  { label: 'B', value: 100 },\n  { label: 'C', value: 100 },\n  { label: 'D', value: 100 },\n  { label: 'E', value: 100 },\n  { label: 'F', value: 100 },\n];\n\n// math helper...\nfunction valueToPoint(value, index, total) {\n  var x = 0;\n  var y = -value * 0.8;\n  var angle = ((Math.PI * 2) / total) * index;\n  var cos = Math.cos(angle);\n  var sin = Math.sin(angle);\n  var tx = x * cos - y * sin + 100;\n  var ty = x * sin + y * cos + 100;\n  return {\n    x: tx,\n    y: ty,\n  };\n}\n\n// A resusable polygon graph component\nconst polygraph = {\n  props: ['stats'],\n  template: `\n  <g>\n      <polygon :points=\"points\"></polygon>\n      <circle cx=\"100\" cy=\"100\" r=\"80\"></circle>\n      <axis-label\n        :key=\"index\"\n        v-for=\"(stat, index) in stats\"\n        :stat=\"stat\"\n        :index=\"index\"\n        :total=\"stats.length\"\n      >\n      </axis-label>\n    </g>\n  `,\n  computed: {\n    // a computed property for the polygon's points\n    points: function () {\n      var total = this.stats.length;\n      return this.stats\n        .map(function (stat, i) {\n          var point = valueToPoint(stat.value, i, total);\n          console.log('point: ', point);\n          return point.x + ',' + point.y;\n        })\n        .join(' ');\n    },\n  },\n  components: {\n    // a sub component for the labels\n    'axis-label': {\n      props: {\n        stat: Object,\n        index: Number,\n        total: Number,\n      },\n      template: '#axis-label-template',\n      computed: {\n        point: function () {\n          return valueToPoint(+this.stat.value + 10, this.index, this.total);\n        },\n      },\n    },\n  },\n};\n\nexport default defineComponent({\n  name: 'SVGGraph',\n  components: {\n    polygraph,\n  },\n  data: function () {\n    return {\n      newLabel: '',\n      stats: stats,\n    };\n  },\n  methods: {\n    add: function (e) {\n      e.preventDefault();\n      if (!this.newLabel) return;\n      this.stats.push({\n        label: this.newLabel,\n        value: 100,\n      });\n      this.newLabel = '';\n    },\n    remove: function (stat) {\n      if (this.stats.length > 3) {\n        this.stats.splice(this.stats.indexOf(stat), 1);\n      } else {\n        alert(\"Can't delete more!\");\n      }\n    },\n  },\n});\n</script>\n\n<style scoped>\npolygon {\n  fill: #42b983;\n  opacity: 0.75;\n}\n\ncircle {\n  fill: transparent;\n  stroke: #999;\n}\n\ntext {\n  font-family: Helvetica Neue, Arial, sans-serif;\n  font-size: 10px;\n  fill: #666;\n}\n\nlabel {\n  display: inline-block;\n  margin-left: 10px;\n  width: 20px;\n}\n\n#raw {\n  position: absolute;\n  top: 0;\n  left: 300px;\n}\n</style>\n"]}